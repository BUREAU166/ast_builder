digraph graphname {
node [shape=record];
0 [label="{inclusion directive | eval.h}"];
1 [label="{FunctionDecl | eval | int (void *)}"];
2 [label="{ParmDecl | arg | void *}"];
3 [label="CompoundStmt"][shape="oval"];
4 [label="{DeclStmt | adder | Adder *}"];
6 [label="{TypeRef | class Adder}"];
7 [label="CStyleCastExpr"][shape="oval"];
8 [label="{TypeRef | class Adder}"];
9 [label="{UnexposedExpr | arg | void *}"];
11 [label="{ReturnStmt | val}"];
13 [label="{MemberRefExpr | val}"];
14 [label="{UnexposedExpr | adder | Adder *}"];
16 [label="{FunctionDecl | isEven | bool (void *)}"];
17 [label="{ParmDecl | arg | void *}"];
18 [label="CompoundStmt"][shape="oval"];
19 [label="{DeclStmt | adder | Adder *}"];
21 [label="{TypeRef | class Adder}"];
22 [label="CStyleCastExpr"][shape="oval"];
23 [label="{TypeRef | class Adder}"];
24 [label="{UnexposedExpr | arg | void *}"];
26 [label="ReturnStmt"][shape="oval"];
27 [label="{BinaryOperator | \->}"];
28 [label="{BinaryOperator | \->}"];
29 [label="{UnexposedExpr | val}"];
30 [label="{MemberRefExpr | val}"];
31 [label="{UnexposedExpr | adder | Adder *}"];
33 [label="{IntegerLiteral | 2}"];
34 [label="{IntegerLiteral | 0}"];
35 [label="{FunctionDecl | filter | std::vector<Adder> (std::vector<Adder>)} "color="red" style="filled" fillcolor="white"];
36 [label="{NamespaceRef | std}"];
37 [label="{TemplateRef | vector}"];
38 [label="{TypeRef | class Adder}"];
39 [label="{ParmDecl | adders | std::vector<Adder>}"];
40 [label="{NamespaceRef | std}"];
41 [label="{TemplateRef | vector}"];
42 [label="{TypeRef | class Adder}"];
43 [label="CompoundStmt"][shape="oval"];
44 [label="ForStmt"][shape="oval"];
45 [label="{DeclStmt | i | int}"];
47 [label="{IntegerLiteral | 0}"];
48 [label="{BinaryOperator | \<}"];
49 [label="{UnexposedExpr | i}"];
50 [label="{UnexposedExpr | i | int}"];
52 [label="{CallExpr | size}"];
53 [label="{MemberRefExpr | size}"];
54 [label="{UnexposedExpr | adders | std::vector<Adder>}"];
56 [label="{UnaryOperator | \i++}"];
57 [label="{DeclRefExpr | i | int}"];
58 [label="CompoundStmt"][shape="oval"];
59 [label="ForStmt"][shape="oval"];
60 [label="{DeclStmt | j | int}"];
62 [label="{IntegerLiteral | 0}"];
63 [label="{BinaryOperator | \<}"];
64 [label="{UnexposedExpr | j}"];
65 [label="{UnexposedExpr | j | int}"];
67 [label="{CallExpr | size}"];
68 [label="{MemberRefExpr | size}"];
69 [label="{UnexposedExpr | adders | std::vector<Adder>}"];
71 [label="{UnaryOperator | \j++}"];
72 [label="{DeclRefExpr | j | int}"];
73 [label="CompoundStmt"][shape="oval"];
74 [label="IfStmt"][shape="oval"];
75 [label="{BinaryOperator | \(}"];
76 [label="{CallExpr | eval}"];
77 [label="{UnexposedExpr | eval | int (void *)}"];
79 [label="UnexposedExpr"][shape="oval"];
80 [label="{UnaryOperator | \&adders[j]}"];
81 [label="{CallExpr | operator[]}"];
82 [label="{DeclRefExpr | adders | std::vector<Adder>}"];
83 [label="{UnexposedExpr | operator[] | std::vector<Adder>::reference (std::vector::size_type) noexcept}"];
85 [label="{UnexposedExpr | j}"];
86 [label="{UnexposedExpr | j | int}"];
88 [label="{CallExpr | eval}"];
89 [label="{UnexposedExpr | eval | int (void *)}"];
91 [label="UnexposedExpr"][shape="oval"];
92 [label="{UnaryOperator | \&adders[i]}"];
93 [label="{CallExpr | operator[]}"];
94 [label="{DeclRefExpr | adders | std::vector<Adder>}"];
95 [label="{UnexposedExpr | operator[] | std::vector<Adder>::reference (std::vector::size_type) noexcept}"];
97 [label="{UnexposedExpr | i}"];
98 [label="{UnexposedExpr | i | int}"];
100 [label="CompoundStmt"][shape="oval"];
101 [label="{CallExpr | swap}"];
102 [label="{UnexposedExpr | swap | typename enable_if<__and_<__not_<__is_tuple_like<Adder>>, is_move_constructible<Adder>, is_move_assignable<Adder>>::value>::type (Adder &, Adder &) noexcept(__and_<is_nothrow_move_constructible<Adder>, is_nothrow_move_assignable<Adder>>::value)}"];
104 [label="{NamespaceRef | std}"];
105 [label="{CallExpr | operator[]}"];
106 [label="{DeclRefExpr | adders | std::vector<Adder>}"];
107 [label="{UnexposedExpr | operator[] | std::vector<Adder>::reference (std::vector::size_type) noexcept}"];
109 [label="{UnexposedExpr | j}"];
110 [label="{UnexposedExpr | j | int}"];
112 [label="{CallExpr | operator[]}"];
113 [label="{DeclRefExpr | adders | std::vector<Adder>}"];
114 [label="{UnexposedExpr | operator[] | std::vector<Adder>::reference (std::vector::size_type) noexcept}"];
116 [label="{UnexposedExpr | i}"];
117 [label="{UnexposedExpr | i | int}"];
1 -> 2;
1 -> 3;
3 -> 4;
0 -> 6;
0 -> 7;
7 -> 8;
7 -> 9;
3 -> 11;
0 -> 13;
13 -> 14;
16 -> 17;
16 -> 18;
18 -> 19;
0 -> 21;
0 -> 22;
22 -> 23;
22 -> 24;
18 -> 26;
26 -> 27;
27 -> 28;
28 -> 29;
29 -> 30;
30 -> 31;
28 -> 33;
27 -> 34;
35 -> 36;
35 -> 37;
35 -> 38;
35 -> 39;
39 -> 40;
39 -> 41;
39 -> 42;
35 -> 43;
43 -> 44;
44 -> 45;
34 -> 47;
44 -> 48;
48 -> 49;
49 -> 50;
48 -> 52;
52 -> 53;
53 -> 54;
44 -> 56;
56 -> 57;
44 -> 58;
58 -> 59;
59 -> 60;
54 -> 62;
59 -> 63;
63 -> 64;
64 -> 65;
63 -> 67;
67 -> 68;
68 -> 69;
59 -> 71;
71 -> 72;
59 -> 73;
73 -> 74;
74 -> 75;
75 -> 76;
76 -> 77;
76 -> 79;
79 -> 80;
80 -> 81;
81 -> 82;
81 -> 83;
81 -> 85;
85 -> 86;
75 -> 88;
88 -> 89;
88 -> 91;
91 -> 92;
92 -> 93;
93 -> 94;
93 -> 95;
93 -> 97;
97 -> 98;
74 -> 100;
100 -> 101;
101 -> 102;
92 -> 104;
101 -> 105;
105 -> 106;
105 -> 107;
105 -> 109;
109 -> 110;
101 -> 112;
112 -> 113;
112 -> 114;
112 -> 116;
116 -> 117;
54 -> 39[style=dashed];
69 -> 39[style=dashed];
77 -> 1[style=dashed];
82 -> 39[style=dashed];
89 -> 1[style=dashed];
94 -> 39[style=dashed];
106 -> 39[style=dashed];
113 -> 39[style=dashed];

}